# coding: utf-8

"""
    TDC API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from tdc_api_client.models.project import Project
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Expense(BaseModel):
    """
    Expense
    """ # noqa: E501
    id: StrictStr
    project: Project
    caption: StrictStr
    amount: Union[StrictFloat, StrictInt]
    date_: date
    needs_refund: Optional[StrictBool] = False
    refunded: Optional[StrictBool] = None
    date_refund: Optional[date] = None
    __properties: ClassVar[List[str]] = ["id", "project", "caption", "amount", "date_", "needs_refund", "refunded", "date_refund"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Expense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # set to None if refunded (nullable) is None
        # and model_fields_set contains the field
        if self.refunded is None and "refunded" in self.model_fields_set:
            _dict['refunded'] = None

        # set to None if date_refund (nullable) is None
        # and model_fields_set contains the field
        if self.date_refund is None and "date_refund" in self.model_fields_set:
            _dict['date_refund'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Expense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project": Project.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "caption": obj.get("caption"),
            "amount": obj.get("amount"),
            "date_": obj.get("date_"),
            "needs_refund": obj.get("needs_refund") if obj.get("needs_refund") is not None else False,
            "refunded": obj.get("refunded"),
            "date_refund": obj.get("date_refund")
        })
        return _obj


